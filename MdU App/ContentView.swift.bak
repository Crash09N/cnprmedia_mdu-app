//
//  ContentView.swift
//  MdU App
//
//  Created by Noah Patrick R. and Mats K. on 24.02.25.
//

import SwiftUI
import WebKit
import Foundation
import CoreData

// Entferne die doppelten Implementierungen der Views
// Die FilesView ist bereits in FilesView.swift definiert
// Die ArticlesView ist bereits in Views/ArticlesView.swift definiert
// Die AccountView ist bereits in AccountView.swift definiert
// Die TimetableView ist bereits in TimetableView.swift definiert

enum Page {
    case home, calendar, tasks, files, webView, articles, account
}

// Dummy-Implementierung für CoreDataManager, falls nicht importiert werden kann
class CoreDataManagerDummy {
    static let shared = CoreDataManagerDummy()
    
    private init() {}
    
    func getCurrentUser() -> UserEntityDummy? {
        // Erstelle einen Dummy-Benutzer mit der Schulklasse "10b"
        let user = UserEntityDummy()
        user.schoolClass = "10b"
        return user
    }
}

// Dummy-Implementierung für UserEntity, falls nicht importiert werden kann
class UserEntityDummy {
    var schoolClass: String?
}

struct ContentView: View {
    @State private var currentPage: Page = .home
    @State private var selectedDate: Date = Date()
    @AppStorage("useFloatingMenuBar") private var useFloatingMenuBar = true
    
    var body: some View {
        ZStack {
            Group {
                switch currentPage {
                case .home:
                    HomeView(currentPage: $currentPage, selectedDate: $selectedDate)
                case .calendar:
                    TimetableView(initialDate: selectedDate)
                case .tasks:
                    Text("Tasks")
                case .files:
                    FilesView()
                case .webView:
                    WebViewContainer(currentPage: $currentPage)
                case .articles:
                    ArticlesView(currentPage: $currentPage)
                case .account:
                    AccountView()
                }
            }
            
            if currentPage != .webView && currentPage != .articles {
                VStack {
                    Spacer()
                    CustomFloatingMenuBar(currentPage: $currentPage, isFloating: useFloatingMenuBar)
                        .padding(.bottom, useFloatingMenuBar ? 0 : -8)
                }
            }
        }
    }
}

struct HomeView: View {
    @Binding var currentPage: Page
    @Binding var selectedDate: Date
    @State private var searchText: String = ""
    @State private var nextLesson: (Lesson, Int)? = nil
    
    // Suchvorschläge für die Suchleiste
    private let searchSuggestions = ["Mathematik", "Deutsch", "Englisch", "Heute", "Morgen", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag"]
    
    private let lessonsByDay: [[Lesson]] = [
        // Montag
        [
            Lesson(subject: "Mathematik", room: "R1.101", teacher: "Dr. Meier", timeSlot: "8:00 - 9:30", color: .blue, startTime: Calendar.current.date(from: DateComponents(hour: 8, minute: 0))!, endTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 30))!),
            Lesson(subject: "Deutsch", room: "R1.201", teacher: "Frau Schmidt", timeSlot: "9:45 - 11:15", color: .red, startTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 45))!, endTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 15))!),
            Lesson(subject: "Englisch", room: "R2.101", teacher: "Mr. Brown", timeSlot: "11:35 - 13:05", color: .purple, startTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 35))!, endTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 5))!),
            Lesson(subject: "Physik", room: "R3.102", teacher: "Herr Weber", timeSlot: "13:50 - 15:20", color: .yellow, startTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 50))!, endTime: Calendar.current.date(from: DateComponents(hour: 15, minute: 20))!),
            Lesson(subject: "Freistunde", room: "", teacher: "", timeSlot: "15:30 - 17:00", color: .gray, startTime: Calendar.current.date(from: DateComponents(hour: 15, minute: 30))!, endTime: Calendar.current.date(from: DateComponents(hour: 17, minute: 0))!)
        ],
        // Dienstag
        [
            Lesson(subject: "Biologie", room: "R2.301", teacher: "Frau Fischer", timeSlot: "8:00 - 9:30", color: .green, startTime: Calendar.current.date(from: DateComponents(hour: 8, minute: 0))!, endTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 30))!),
            Lesson(subject: "Chemie", room: "R3.205", teacher: "Dr. Hoffmann", timeSlot: "9:45 - 11:15", color: .pink, startTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 45))!, endTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 15))!),
            Lesson(subject: "Geschichte", room: "R1.112", teacher: "Herr Lehmann", timeSlot: "11:35 - 13:05", color: .cyan, startTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 35))!, endTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 5))!),
            Lesson(subject: "Kunst", room: "R4.104", teacher: "Frau Wagner", timeSlot: "13:50 - 15:20", color: .orange, startTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 50))!, endTime: Calendar.current.date(from: DateComponents(hour: 15, minute: 20))!),
            Lesson(subject: "Freistunde", room: "", teacher: "", timeSlot: "15:30 - 17:00", color: .gray, startTime: Calendar.current.date(from: DateComponents(hour: 15, minute: 30))!, endTime: Calendar.current.date(from: DateComponents(hour: 17, minute: 0))!)
        ],
        // Mittwoch
        [
            Lesson(subject: "Sport", room: "Sporthalle", teacher: "Herr Müller", timeSlot: "8:00 - 9:30", color: .green, startTime: Calendar.current.date(from: DateComponents(hour: 8, minute: 0))!, endTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 30))!),
            Lesson(subject: "Informatik", room: "R2.205", teacher: "Herr Klein", timeSlot: "9:45 - 11:15", color: .blue, startTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 45))!, endTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 15))!),
            Lesson(subject: "Ethik", room: "R1.112", teacher: "Frau Bauer", timeSlot: "11:35 - 13:05", color: .purple, startTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 35))!, endTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 5))!)
        ],
        // Donnerstag
        [
            Lesson(subject: "Deutsch", room: "R1.201", teacher: "Frau Schmidt", timeSlot: "8:00 - 9:30", color: .red, startTime: Calendar.current.date(from: DateComponents(hour: 8, minute: 0))!, endTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 30))!),
            Lesson(subject: "Mathematik", room: "R1.101", teacher: "Dr. Meier", timeSlot: "9:45 - 11:15", color: .blue, startTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 45))!, endTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 15))!),
            Lesson(subject: "Kunst", room: "R4.104", teacher: "Frau Wagner", timeSlot: "11:35 - 13:05", color: .orange, startTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 35))!, endTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 5))!),
            Lesson(subject: "Englisch", room: "R2.101", teacher: "Mr. Brown", timeSlot: "13:50 - 15:20", color: .purple, startTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 50))!, endTime: Calendar.current.date(from: DateComponents(hour: 15, minute: 20))!)
        ],
        // Freitag
        [
            Lesson(subject: "Geschichte", room: "R1.112", teacher: "Herr Lehmann", timeSlot: "8:00 - 9:30", color: .cyan, startTime: Calendar.current.date(from: DateComponents(hour: 8, minute: 0))!, endTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 30))!),
            Lesson(subject: "Physik", room: "R3.102", teacher: "Herr Weber", timeSlot: "9:45 - 11:15", color: .yellow, startTime: Calendar.current.date(from: DateComponents(hour: 9, minute: 45))!, endTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 15))!),
            Lesson(subject: "Biologie", room: "R2.301", teacher: "Frau Fischer", timeSlot: "11:35 - 13:05", color: .green, startTime: Calendar.current.date(from: DateComponents(hour: 11, minute: 35))!, endTime: Calendar.current.date(from: DateComponents(hour: 13, minute: 5))!)
        ]
    ]
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background
                Color(UIColor.systemGroupedBackground)
                    .edgesIgnoringSafeArea(.all)
                
                VStack(spacing: 0) {
                    // Fixed Header
                    VStack {
                        Text("Marienschule Bielefeld")
                            .font(.system(size: 32, weight: .bold))
                            .padding(.top, 10)
                            .padding(.bottom, 10)
                            .onTapGesture {
                                currentPage = .articles
                            }
                    }
                    .frame(maxWidth: .infinity)
                    .background(Color(UIColor.systemGroupedBackground))
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 5)
                    .zIndex(1)
                    
                    // Scrollable Content
                    ScrollView {
                        VStack(spacing: 24) {
                            // Spacer to account for fixed header
                            Color.clear.frame(height: 10)
                            
                            // Suchleiste
                            VStack(spacing: 8) {
                                HStack {
                                    Image(systemName: "magnifyingglass")
                                        .foregroundColor(.gray)
                                        .padding(.leading, 12)
                                    
                                    TextField("Nach Fächern, Lehrern oder Räumen suchen...", text: $searchText)
                                        .padding(.vertical, 12)
                                    
                                    if !searchText.isEmpty {
                                        Button(action: {
                                            searchText = ""
                                        }) {
                                            Image(systemName: "xmark.circle.fill")
                                                .foregroundColor(.gray)
                                                .padding(.trailing, 12)
                                        }
                                    }
                                }
                                .background(
                                    RoundedRectangle(cornerRadius: 12)
                                        .fill(Color(.systemBackground))
                                        .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                                )
                                
                                // Suchvorschläge anzeigen, wenn die Suchleiste leer ist
                                if searchText.isEmpty {
                                    ScrollView(.horizontal, showsIndicators: false) {
                                        HStack(spacing: 8) {
                                            ForEach(searchSuggestions, id: \.self) { suggestion in
                                                Button(action: {
                                                    searchText = suggestion
                                                }) {
                                                    Text(suggestion)
                                                        .font(.system(size: 14, weight: .medium))
                                                        .padding(.horizontal, 12)
                                                        .padding(.vertical, 6)
                                                        .background(
                                                            Capsule()
                                                                .fill(Color.blue.opacity(0.1))
                                                        )
                                                        .foregroundColor(.blue)
                                                }
                                            }
                                        }
                                        .padding(.horizontal, 4)
                                    }
                                }
                            }
                            
                            // Gefundene Termine anzeigen, wenn nach Fächern oder Daten gesucht wird
                            if !searchText.isEmpty && (isSearchingForLessons() || isSearchingForDate()) {
                                VStack(alignment: .leading, spacing: 16) {
                                    HStack {
                                        Text("Gefundene Termine")
                                            .font(.system(size: 18, weight: .semibold))
                                            
                                        Spacer()
                                        
                                        Text("\(searchLessons().count) Ergebnisse")
                                            .font(.system(size: 14, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                    .padding(.horizontal, 16)
                                    .padding(.top, 16)
                                    
                                    Rectangle()
                                        .fill(Color.gray.opacity(0.2))
                                        .frame(height: 1)
                                        .padding(.horizontal, 16)
                                    
                                    ForEach(searchLessons(), id: \.0.subject) { result in
                                        LessonSearchResultRow(lesson: result.0, dayOffset: result.1, dayLabel: dayLabel(for: result.1))
                                            .onTapGesture {
                                                navigateToCalendar(for: result.1)
                                            }
                                    }
                                    
                                    if searchLessons().isEmpty {
                                        HStack {
                                            Spacer()
                                            Text("Keine Termine gefunden")
                                                .font(.system(size: 14, weight: .medium))
                                                .foregroundColor(.secondary)
                                                .padding(.vertical, 20)
                                            Spacer()
                                        }
                                    }
                                }
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(Color(.systemBackground))
                                        .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
                                )
                            }
                            
                            // Gefilterte Inhalte basierend auf der Suche
                            if searchText.isEmpty || "homepage".contains(searchText.lowercased()) || "marienschule".contains(searchText.lowercased()) || "bielefeld".contains(searchText.lowercased()) {
                                // WebView-Button (Homepage)
                                GeometryReader { geometry in
                                    Button(action: { currentPage = .webView }) {
                                        ZStack(alignment: .bottom) {
                                            AsyncImage(url: URL(string: "https://marienschule-bielefeld.de/wp-content/uploads/marienschule-header.jpg")) { image in
                                                image.resizable()
                                                    .scaledToFill()
                                                    .frame(width: geometry.size.width, height: 180)
                                                    .clipped()
                                            } placeholder: {
                                                Rectangle()
                                                    .fill(Color.gray.opacity(0.3))
                                                    .frame(width: geometry.size.width, height: 180)
                                                    .overlay(
                                                        ProgressView()
                                                            .scaleEffect(1.5)
                                                    )
                                            }
                                            .overlay(
                                                LinearGradient(
                                                    gradient: Gradient(colors: [Color.black.opacity(0.7), Color.black.opacity(0)]),
                                                    startPoint: .bottom,
                                                    endPoint: .center
                                                )
                                            )
                                            
                                            HStack {
                                                VStack(alignment: .leading) {
                                                    Text("Homepage")
                                                        .font(.system(size: 24, weight: .bold))
                                                        .foregroundColor(.white)
                                                    
                                                    Text("marienschule-bielefeld.de")
                                                        .font(.system(size: 14, weight: .medium))
                                                        .foregroundColor(.white.opacity(0.8))
                                                }
                                                .padding(.leading, 16)
                                                .padding(.bottom, 16)
                                                
                                                Spacer()
                                                
                                                Image(systemName: "arrow.up.right.square")
                                                    .font(.system(size: 20, weight: .semibold))
                                                    .foregroundColor(.white)
                                                    .padding(.trailing, 16)
                                                    .padding(.bottom, 16)
                                            }
                                        }
                                        .cornerRadius(16)
                                        .shadow(color: Color.black.opacity(0.15), radius: 10, x: 0, y: 5)
                                    }
                                }
                                .frame(height: 180)
                            }
                            
                            if searchText.isEmpty || "news".contains(searchText.lowercased()) || "neuigkeiten".contains(searchText.lowercased()) || "nachrichten".contains(searchText.lowercased()) || "ankündigungen".contains(searchText.lowercased()) {
                                // News button
                                Button(action: { currentPage = .articles }) {
                                    HStack(spacing: 16) {
                                        ZStack {
                                            Circle()
                                                .fill(
                                                    LinearGradient(
                                                        gradient: Gradient(colors: [Color.blue, Color.blue.opacity(0.7)]),
                                                        startPoint: .topLeading,
                                                        endPoint: .bottomTrailing
                                                    )
                                                )
                                                .frame(width: 56, height: 56)
                                                .shadow(color: Color.blue.opacity(0.3), radius: 5, x: 0, y: 3)
                                            
                                            Image(systemName: "newspaper.fill")
                                                .font(.system(size: 24, weight: .semibold))
                                                .foregroundColor(.white)
                                        }
                                        
                                        VStack(alignment: .leading, spacing: 4) {
                                            Text("Neuigkeiten")
                                                .font(.system(size: 18, weight: .semibold))
                                                .foregroundColor(.primary)
                                            
                                            Text("Aktuelle Nachrichten und Ankündigungen")
                                                .font(.system(size: 14))
                                                .foregroundColor(.secondary)
                                                .lineLimit(1)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .font(.system(size: 16, weight: .semibold))
                                            .foregroundColor(.blue)
                                            .padding(.trailing, 8)
                                    }
                                    .padding(.vertical, 16)
                                    .padding(.horizontal, 16)
                                    .background(
                                        RoundedRectangle(cornerRadius: 16)
                                            .fill(Color(.systemBackground))
                                            .shadow(color: Color.black.opacity(0.08), radius: 8, x: 0, y: 4)
                                    )
                                }
                                .frame(minWidth: 0, maxWidth: .infinity)
                            }
                            
                            if searchText.isEmpty || "unterricht".contains(searchText.lowercased()) || "stunde".contains(searchText.lowercased()) || "lektion".contains(searchText.lowercased()) || "kalender".contains(searchText.lowercased()) || "nächste".contains(searchText.lowercased()) {
                                // NextLessonWidget
                                NextLessonWidget(nextLesson: nextLesson)
                                    .frame(minWidth: 0, maxWidth: .infinity)
                                    .onTapGesture {
                                        if let (_, dayOffset) = nextLesson {
                                            // Berechne das Datum des Termins
                                            let calendar = Calendar.current
                                            let today = calendar.startOfDay(for: Date())
                                            if let lessonDate = calendar.date(byAdding: .day, value: dayOffset, to: today) {
                                                // Setze das ausgewählte Datum und navigiere zur Kalenderansicht
                                                selectedDate = lessonDate
                                                currentPage = .calendar
                                            }
                                        }
                                    }
                            }
                            
                            if searchText.isEmpty || "kontakt".contains(searchText.lowercased()) || "adresse".contains(searchText.lowercased()) || "telefon".contains(searchText.lowercased()) || "email".contains(searchText.lowercased()) || "marienschule".contains(searchText.lowercased()) || "schule".contains(searchText.lowercased()) {
                                // Kontakt-Widget
                                SchoolContactWidget()
                                    .frame(minWidth: 0, maxWidth: .infinity)
                            }
                            
                            if searchText.isEmpty || "fahrplan".contains(searchText.lowercased()) || "bus".contains(searchText.lowercased()) || "bahn".contains(searchText.lowercased()) || "mobiel".contains(searchText.lowercased()) || "verkehr".contains(searchText.lowercased()) || "transport".contains(searchText.lowercased()) {
                                // Fahrplan-Widget
                                TransportLinksWidget()
                                    .frame(minWidth: 0, maxWidth: .infinity)
                            }
                            
                            // Wenn keine Ergebnisse gefunden wurden
                            if !searchText.isEmpty && 
                               !("homepage".contains(searchText.lowercased()) || "marienschule".contains(searchText.lowercased()) || "bielefeld".contains(searchText.lowercased())) &&
                               !("news".contains(searchText.lowercased()) || "neuigkeiten".contains(searchText.lowercased()) || "nachrichten".contains(searchText.lowercased()) || "ankündigungen".contains(searchText.lowercased())) &&
                               !("unterricht".contains(searchText.lowercased()) || "stunde".contains(searchText.lowercased()) || "lektion".contains(searchText.lowercased()) || "kalender".contains(searchText.lowercased()) || "nächste".contains(searchText.lowercased())) &&
                               !("kontakt".contains(searchText.lowercased()) || "adresse".contains(searchText.lowercased()) || "telefon".contains(searchText.lowercased()) || "email".contains(searchText.lowercased()) || "marienschule".contains(searchText.lowercased()) || "schule".contains(searchText.lowercased())) &&
                               !("fahrplan".contains(searchText.lowercased()) || "bus".contains(searchText.lowercased()) || "bahn".contains(searchText.lowercased()) || "mobiel".contains(searchText.lowercased()) || "verkehr".contains(searchText.lowercased()) || "transport".contains(searchText.lowercased())) &&
                               searchLessons().isEmpty
                            {
                                VStack(spacing: 20) {
                                    Image(systemName: "magnifyingglass")
                                        .font(.system(size: 50))
                                        .foregroundColor(.gray)
                                        .padding(.top, 30)
                                    
                                    Text("Keine Ergebnisse für \"\(searchText)\"")
                                        .font(.system(size: 18, weight: .semibold))
                                        .foregroundColor(.secondary)
                                    
                                    Text("Versuche einen anderen Suchbegriff")
                                        .font(.system(size: 14))
                                        .foregroundColor(.secondary)
                                        .multilineTextAlignment(.center)
                                        .padding(.bottom, 30)
                                }
                                .frame(maxWidth: .infinity)
                                .padding(.vertical, 40)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(Color(.systemBackground))
                                        .shadow(color: Color.black.opacity(0.08), radius: 8, x: 0, y: 4)
                                )
                            }
                        }
                        .padding(.horizontal, 20)
                        .padding(.bottom, 30)
                        
                        // Zusätzlicher Platz am Ende, damit das letzte Widget nicht von der Menüleiste verdeckt wird
                        Spacer()
                            .frame(height: 80)
                    }
                }
            }
            .navigationBarHidden(true)
        }
        .navigationViewStyle(StackNavigationViewStyle())
        .onAppear {
            loadNextLesson()
        }
    }
    
    private func loadNextLesson() {
        print("loadNextLesson() wird aufgerufen")
        
        // Verwende CoreDataManagerDummy als Fallback, falls CoreDataManager nicht verfügbar ist
        let user: Any?
        let schoolClass: String?
        
        // Versuche, CoreDataManager zu verwenden, falls verfügbar
        #if canImport(CoreDataManager)
        do {
            print("Versuche CoreDataManager zu verwenden")
            user = CoreDataManager.shared.getCurrentUser()
            schoolClass = (user as? UserEntity)?.schoolClass
            print("Benutzer aus CoreDataManager: \(user != nil ? "gefunden" : "nicht gefunden"), Jahrgang: \(schoolClass ?? "nicht gefunden")")
        } catch {
            // Fallback auf Dummy-Implementierung
            print("Fehler beim Zugriff auf CoreDataManager: \(error), verwende Dummy")
            user = CoreDataManagerDummy.shared.getCurrentUser()
            schoolClass = (user as? UserEntityDummy)?.schoolClass
            print("Benutzer aus CoreDataManagerDummy: \(user != nil ? "gefunden" : "nicht gefunden"), Jahrgang: \(schoolClass ?? "nicht gefunden")")
        }
        #else
        // Fallback auf Dummy-Implementierung
        print("CoreDataManager nicht verfügbar, verwende Dummy")
        user = CoreDataManagerDummy.shared.getCurrentUser()
        schoolClass = (user as? UserEntityDummy)?.schoolClass
        print("Benutzer aus CoreDataManagerDummy: \(user != nil ? "gefunden" : "nicht gefunden"), Jahrgang: \(schoolClass ?? "nicht gefunden")")
        #endif
        
        // Für Testzwecke: Wenn keine Klasse gefunden wurde, setze sie auf "10b"
        if schoolClass == nil {
            print("Kein Jahrgang gefunden, verwende '10b' für Testzwecke")
            let testClass = "10b"
            
            // Prüfe, ob für diesen Jahrgang Stundenpläne existieren
            print("Suche nach Stundenplänen für Jahrgang: \(testClass)")
            
            // Lade alle Termine für die nächsten 7 Tage und finde den nächsten Termin
            if let nextLessonFromCalendar = findNextLessonFromCalendar(for: testClass) {
                print("Nächste Stunde aus dem Kalender gefunden: \(nextLessonFromCalendar.0.subject)")
                nextLesson = nextLessonFromCalendar
                return
            } else {
                print("Keine nächste Stunde im Kalender gefunden für Jahrgang: \(testClass)")
            }
        }
        // Prüfe, ob für diesen Jahrgang Stundenpläne existieren
        else if let schoolClass = schoolClass {
            print("Suche nach Stundenplänen für Jahrgang: \(schoolClass)")
            
            // Lade alle Termine für die nächsten 7 Tage und finde den nächsten Termin
            if let nextLessonFromCalendar = findNextLessonFromCalendar(for: schoolClass) {
                print("Nächste Stunde aus dem Kalender gefunden: \(nextLessonFromCalendar.0.subject)")
                nextLesson = nextLessonFromCalendar
                return
            } else {
                print("Keine nächste Stunde im Kalender gefunden für Jahrgang: \(schoolClass)")
            }
        } else {
            print("Kein Jahrgang gefunden")
        }
        
        // Wenn kein Kalender vorhanden ist oder keine Stunden gefunden wurden, setze nextLesson auf nil
        // Dadurch wird im Widget "Keine Stunden" angezeigt
        print("Setze nextLesson auf nil, da keine Stunden gefunden wurden")
        nextLesson = nil
    }
    
    private func findNextLessonFromCalendar(for schoolClass: String) -> (Lesson, Int)? {
        print("findNextLessonFromCalendar() für Klasse \(schoolClass)")
        let calendar = Calendar.current
        let now = Date()
        
        // Prüfe die nächsten 7 Tage
        for dayOffset in 0...7 {
            let checkDate = calendar.date(byAdding: .day, value: dayOffset, to: now)!
            let weekday = calendar.component(.weekday, from: checkDate)
            
            // Überspringe Wochenenden (Samstag und Sonntag)
            if weekday == 1 || weekday == 7 {
                print("Überspringe Tag +\(dayOffset) (Wochenende, Wochentag \(weekday))")
                continue
            }
            
            // Bestimme, ob es eine grüne oder rote Woche ist
            let isGreenWeek = TimetableService.isGreenWeek(for: checkDate)
            let weekdayString = TimetableService.weekdayString(for: weekday)
            
            print("Prüfe Termine für \(weekdayString) (Tag +\(dayOffset), \(isGreenWeek ? "grüne" : "rote") Woche)")
            
            // Lade den Stundenplan für diesen Tag
            if let lessonData = TimetableService.loadTimetable(for: schoolClass, weekday: weekdayString, isGreenWeek: isGreenWeek) {
                print("Gefunden: \(lessonData.count) Termine für \(weekdayString)")
                
                // Konvertiere die Daten in Lesson-Objekte
                let lessons = lessonData.map { TimetableService.convertToLesson(lessonData: $0, date: checkDate) }
                
                // Sortiere die Termine nach Startzeit
                let sortedLessons = lessons.sorted { $0.startTime < $1.startTime }
                
                print("Sortierte Termine: \(sortedLessons.map { "\($0.subject) um \($0.timeSlot)" })")
                
                // Wenn es der aktuelle Tag ist, finde den nächsten Termin basierend auf der aktuellen Zeit
                if dayOffset == 0 {
                    print("Prüfe heutige Termine (aktuelle Zeit: \(now))")
                    for lesson in sortedLessons {
                        print("Prüfe Termin: \(lesson.subject) um \(lesson.timeSlot), Startzeit: \(lesson.startTime)")
                        if lesson.startTime > now {
                            print("Nächste Stunde heute: \(lesson.subject) um \(lesson.timeSlot)")
                            return (lesson, 0)
                        } else {
                            print("Termin bereits vorbei oder läuft gerade")
                        }
                    }
                    // Wenn keine Stunde für heute gefunden wurde, wird automatisch am nächsten Tag weitergesucht
                    print("Keine weiteren Stunden für heute gefunden")
                } 
                // Für zukünftige Tage, nimm den ersten Termin des Tages
                else if !sortedLessons.isEmpty {
                    print("Nächste Stunde in \(dayOffset) Tagen: \(sortedLessons[0].subject) um \(sortedLessons[0].timeSlot)")
                    return (sortedLessons[0], dayOffset)
                } else {
                    print("Keine Termine für Tag +\(dayOffset) gefunden")
                }
            } else {
                print("Keine Termine für \(weekdayString) (\(isGreenWeek ? "grüne" : "rote") Woche) gefunden")
            }
        }
        
        // Keine nächste Stunde gefunden
        print("Keine nächste Stunde in den kommenden 7 Tagen gefunden")
        return nil
    }
    
    // Prüft, ob nach Unterrichtsfächern gesucht wird
    private func isSearchingForLessons() -> Bool {
        let subjects = [
            "mathematik", "mathe", "deutsch", "englisch", "physik", "biologie", "chemie", 
            "geschichte", "kunst", "sport", "informatik", "ethik", "religion", "erdkunde", 
            "geo", "geographie", "französisch", "latein", "russisch", "musik", "politik"
        ]
        
        let teachers = [
            "meier", "schmidt", "brown", "weber", "fischer", "hoffmann", "lehmann", 
            "wagner", "müller", "klein", "bauer", "rau", "rue", "hock", "elt", "bey", "vau"
        ]
        
        let rooms = [
            "r1.101", "r1.201", "r2.101", "r3.102", "r2.301", "r3.205", "r1.112", "r4.104", 
            "sporthalle", "r2.205", "h216", "i107", "h109", "chü"
        ]
        
        let searchLower = searchText.lowercased()
        
        return subjects.contains { searchLower.contains($0) } ||
               teachers.contains { searchLower.contains($0) } ||
               rooms.contains { searchLower.contains($0) }
    }
    
    // Prüft, ob nach einem Datum gesucht wird
    private func isSearchingForDate() -> Bool {
        let weekdays = ["montag", "dienstag", "mittwoch", "donnerstag", "freitag", "samstag", "sonntag", "heute", "morgen"]
        let months = ["januar", "februar", "märz", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "dezember"]
        
        let searchLower = searchText.lowercased()
        
        // Prüfe auf Wochentage oder Monate
        if weekdays.contains(where: { searchLower.contains($0) }) || 
           months.contains(where: { searchLower.contains($0) }) {
            return true
        }
        
        // Prüfe auf Datumsformate (z.B. 01.01, 1.1., 01.01.2023)
        let datePattern = "\\b\\d{1,2}[./-]\\d{1,2}([./-]\\d{2,4})?\\b"
        let regex = try? NSRegularExpression(pattern: datePattern)
        if let regex = regex,
           let _ = regex.firstMatch(in: searchText, range: NSRange(location: 0, length: searchText.count)) {
            return true
        }
        
        return false
    }
    
    // Sucht nach passenden Terminen basierend auf dem Suchtext
    private func searchLessons() -> [(Lesson, Int)] {
        var results: [(Lesson, Int)] = []
        
        // Suche in den Dummy-Daten
        let dummyResults = searchDummyLessons()
        results.append(contentsOf: dummyResults)
        
        // Suche in den echten Kalenderdaten
        let calendarResults = searchCalendarLessons()
        results.append(contentsOf: calendarResults)
        
        // Sortiere nach Datum (nächste zuerst)
        results.sort { $0.1 < $1.1 }
        
        return results
    }
    
    // Sucht in den Dummy-Daten nach passenden Terminen
    private func searchDummyLessons() -> [(Lesson, Int)] {
        var results: [(Lesson, Int)] = []
        
        // Suche in allen Tagen nach passenden Terminen
        for (dayIndex, lessons) in lessonsByDay.enumerated() {
            for lesson in lessons {
                if matchesSearch(lesson: lesson, dayIndex: dayIndex) {
                    // Berechne den Tagesversatz vom aktuellen Tag
                    let dayOffset = calculateDayOffset(for: dayIndex)
                    results.append((lesson, dayOffset))
                }
            }
        }
        
        return results
    }
    
    // Sucht in den echten Kalenderdaten nach passenden Terminen
    private func searchCalendarLessons() -> [(Lesson, Int)] {
        var results: [(Lesson, Int)] = []
        let searchLower = searchText.lowercased()
        let calendar = Calendar.current
        let now = Date()
        
        // Verwende CoreDataManagerDummy als Fallback, falls CoreDataManager nicht verfügbar ist
        let user: Any?
        let schoolClass: String?
        
        #if canImport(CoreDataManager)
        do {
            user = CoreDataManager.shared.getCurrentUser()
            schoolClass = (user as? UserEntity)?.schoolClass
        } catch {
            user = CoreDataManagerDummy.shared.getCurrentUser()
            schoolClass = (user as? UserEntityDummy)?.schoolClass
        }
        #else
        user = CoreDataManagerDummy.shared.getCurrentUser()
        schoolClass = (user as? UserEntityDummy)?.schoolClass
        #endif
        
        // Wenn keine Klasse gefunden wurde, verwende "10b" für Testzwecke
        let classToSearch = schoolClass ?? "10b"
        
        // Prüfe die nächsten 14 Tage
        for dayOffset in 0...14 {
            let checkDate = calendar.date(byAdding: .day, value: dayOffset, to: now)!
            let weekday = calendar.component(.weekday, from: checkDate)
            
            // Überspringe Wochenenden (Samstag und Sonntag)
            if weekday == 1 || weekday == 7 {
                continue
            }
            
            // Bestimme, ob es eine grüne oder rote Woche ist
            let isGreenWeek = TimetableService.isGreenWeek(for: checkDate)
            let weekdayString = TimetableService.weekdayString(for: weekday)
            
            // Lade den Stundenplan für diesen Tag
            if let lessonData = TimetableService.loadTimetable(for: classToSearch, weekday: weekdayString, isGreenWeek: isGreenWeek) {
                // Konvertiere die Daten in Lesson-Objekte
                let lessons = lessonData.map { TimetableService.convertToLesson(lessonData: $0, date: checkDate) }
                
                // Filtere nach dem Suchtext
                for lesson in lessons {
                    if lesson.subject.lowercased().contains(searchLower) ||
                       lesson.teacher.lowercased().contains(searchLower) ||
                       lesson.room.lowercased().contains(searchLower) ||
                       weekdayString.lowercased().contains(searchLower) {
                        results.append((lesson, dayOffset))
                    }
                }
            }
        }
        
        return results
    }
    
    // Prüft, ob ein Termin zum Suchtext passt
    private func matchesSearch(lesson: Lesson, dayIndex: Int) -> Bool {
        let searchLower = searchText.lowercased()
        
        // Prüfe auf Übereinstimmungen mit Fach, Lehrer oder Raum
        if lesson.subject.lowercased().contains(searchLower) ||
           lesson.teacher.lowercased().contains(searchLower) ||
           lesson.room.lowercased().contains(searchLower) {
            return true
        }
        
        // Prüfe auf Übereinstimmungen mit Wochentagen
        let weekdays = ["montag", "dienstag", "mittwoch", "donnerstag", "freitag"]
        if dayIndex < weekdays.count && searchLower.contains(weekdays[dayIndex]) {
            return true
        }
        
        // Prüfe auf "heute" oder "morgen"
        let calendar = Calendar.current
        let today = calendar.component(.weekday, from: Date())
        let currentDayIndex = today == 1 ? 6 : today - 2 // Umrechnung auf 0 = Montag
        
        if searchLower.contains("heute") && dayIndex == currentDayIndex {
            return true
        }
        
        if searchLower.contains("morgen") && dayIndex == (currentDayIndex + 1) % 7 {
            return true
        }
        
        return false
    }
    
    // Berechnet den Tagesversatz vom aktuellen Tag
    private func calculateDayOffset(for dayIndex: Int) -> Int {
        let calendar = Calendar.current
        let today = calendar.component(.weekday, from: Date())
        let currentDayIndex = today == 1 ? 6 : today - 2 // Umrechnung auf 0 = Montag
        
        if dayIndex >= currentDayIndex {
            return dayIndex - currentDayIndex
        } else {
            return 7 - currentDayIndex + dayIndex
        }
    }
    
    // Navigiert zur Kalenderansicht mit dem ausgewählten Datum
    private func navigateToCalendar(for dayOffset: Int) {
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        if let lessonDate = calendar.date(byAdding: .day, value: dayOffset, to: today) {
            selectedDate = lessonDate
            currentPage = .calendar
        }
    }
    
    // Gibt das Label für einen Wochentag zurück
    private func dayLabel(for dayOffset: Int) -> String {
        switch dayOffset {
        case 0:
            return "Heute"
        case 1:
            return "Morgen"
        default:
            let calendar = Calendar.current
            let today = calendar.startOfDay(for: Date())
            if let futureDate = calendar.date(byAdding: .day, value: dayOffset, to: today) {
                let weekday = calendar.component(.weekday, from: futureDate)
                switch weekday {
                case 1: return "Sonntag"
                case 2: return "Montag"
                case 3: return "Dienstag"
                case 4: return "Mittwoch"
                case 5: return "Donnerstag"
                case 6: return "Freitag"
                case 7: return "Samstag"
                default: return ""
                }
            }
            return ""
        }
    }
}

struct NextLessonWidget: View {
    let nextLesson: (Lesson, Int)?
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        Group {
            if let (lesson, dayOffset) = nextLesson {
                VStack(alignment: .leading, spacing: 0) {
                    // Header mit Tagesanzeige
                    HStack {
                        Image(systemName: "clock.fill")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.white)
                            .padding(10)
                            .background(
                                Circle()
                                    .fill(
                                        LinearGradient(
                                            gradient: Gradient(colors: [lesson.color, lesson.color.opacity(0.7)]),
                                            startPoint: .topLeading,
                                            endPoint: .bottomTrailing
                                        )
                                    )
                                )
                            )
                            .frame(width: 48, height: 48)
                        
                        VStack(alignment: .leading, spacing: 2) {
                            Text(dayLabel(for: dayOffset))
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.secondary)
                            
                            Text("Nächste Stunde")
                                .font(.system(size: 18, weight: .semibold))
                        }
                        
                        Spacer()
                        
                        Text(lesson.timeSlot)
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(.white)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 5)
                            .background(
                                Capsule()
                                    .fill(
                                        LinearGradient(
                                            gradient: Gradient(colors: [lesson.color, lesson.color.opacity(0.7)]),
                                            startPoint: .topLeading,
                                            endPoint: .bottomTrailing
                                        )
                                    )
                                )
                            )
                    }
                    .padding(.horizontal, 16)
                    .padding(.top, 16)
                    .padding(.bottom, 12)
                    
                    // Divider
                    Rectangle()
                        .fill(Color.gray.opacity(0.2))
                        .frame(height: 1)
                        .padding(.horizontal, 16)
                    
                    // Content
                    VStack(alignment: .leading, spacing: 16) {
                        // Subject and room
                        HStack(alignment: .top) {
                            VStack(alignment: .leading, spacing: 4) {
                                Text(lesson.subject)
                                    .font(.system(size: 22, weight: .bold))
                                    .foregroundColor(.primary)
                                
                                if !lesson.room.isEmpty {
                                    HStack(spacing: 4) {
                                        Image(systemName: "mappin.circle.fill")
                                            .font(.system(size: 14))
                                            .foregroundColor(lesson.color)
                                        
                                        Text(lesson.room)
                                            .font(.system(size: 14, weight: .medium))
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }
                            
                            Spacer()
                            
                            if !lesson.teacher.isEmpty {
                                HStack(spacing: 4) {
                                    Image(systemName: "person.fill")
                                        .font(.system(size: 14))
                                        .foregroundColor(lesson.color)
                                    
                                    Text(lesson.teacher)
                                        .font(.system(size: 14, weight: .medium))
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.top, 12)
                        
                        // Progress oder Countdown
                        VStack(spacing: 6) {
                            if dayOffset == 0 {
                                // Für heutige Termine: Fortschrittsbalken
                                ProgressView(value: progress(for: lesson))
                                    .progressViewStyle(LinearProgressViewStyle(tint: lesson.color))
                                
                                HStack {
                                    Text("Beginnt in \(timeUntilStart(for: lesson))")
                                        .font(.system(size: 12, weight: .medium))
                                        .foregroundColor(.secondary)
                                    
                                    Spacer()
                                    
                                    Text("\(Int(progress(for: lesson) * 100))%")
                                        .font(.system(size: 12, weight: .bold))
                                        .foregroundColor(lesson.color)
                                }
                            } else {
                                // Für zukünftige Termine: Countdown in Tagen
                                HStack {
                                    Text(countdownText(for: dayOffset))
                                        .font(.system(size: 12, weight: .medium))
                                        .foregroundColor(.secondary)
                                    
                                    Spacer()
                                }
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.bottom, 16)
                    }
                }
                .background(
                    RoundedRectangle(cornerRadius: 16)
                        .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                        .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
                )
            } else {
                // Anzeige, wenn keine Stunden vorhanden sind
                HStack(spacing: 16) {
                    ZStack {
                        Circle()
                            .fill(Color.gray.opacity(0.2))
                            .frame(width: 56, height: 56)
                        
                        Image(systemName: "calendar.badge.exclamationmark")
                            .font(.system(size: 24))
                            .foregroundColor(.orange)
                    }
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Keine Stunden verfügbar")
                            .font(.system(size: 18, weight: .semibold))
                            .foregroundColor(.primary)
                        
                        Text("Bitte wähle einen Jahrgang in deinem Profil")
                            .font(.system(size: 14))
                            .foregroundColor(.secondary)
                    }
                    
                    Spacer()
                }
                .padding(.vertical, 20)
                .padding(.horizontal, 16)
                .background(
                    RoundedRectangle(cornerRadius: 16)
                        .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                        .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
                )
            }
        }
    }
    
    private func dayLabel(for dayOffset: Int) -> String {
        switch dayOffset {
        case 0:
            return "Heute"
        case 1:
            return "Morgen"
        default:
            let calendar = Calendar.current
            let today = calendar.startOfDay(for: Date())
            if let futureDate = calendar.date(byAdding: .day, value: dayOffset, to: today) {
                let weekday = calendar.component(.weekday, from: futureDate)
                switch weekday {
                case 1: return "Sonntag"
                case 2: return "Montag"
                case 3: return "Dienstag"
                case 4: return "Mittwoch"
                case 5: return "Donnerstag"
                case 6: return "Freitag"
                case 7: return "Samstag"
                default: return ""
                }
            }
            return ""
        }
    }
    
    private func countdownText(for dayOffset: Int) -> String {
        if let (lesson, _) = nextLesson {
            switch dayOffset {
            case 1:
                return "Morgen um \(lesson.timeSlot.components(separatedBy: " - ")[0]) Uhr"
            default:
                return "In \(dayOffset) Tagen"
            }
        }
        return ""
    }
    
    private func progress(for lesson: Lesson) -> Float {
        let now = Date()
        if now < lesson.startTime {
            return 0.0
        } else if now > lesson.endTime {
            return 1.0
        } else {
            let totalDuration = lesson.endTime.timeIntervalSince(lesson.startTime)
            let elapsedDuration = now.timeIntervalSince(lesson.startTime)
            return Float(elapsedDuration / totalDuration)
        }
    }
    
    private func timeUntilStart(for lesson: Lesson) -> String {
        let now = Date()
        if now >= lesson.startTime {
            return "Läuft bereits"
        }
        
        let timeInterval = lesson.startTime.timeIntervalSince(now)
        let hours = Int(timeInterval) / 3600
        let minutes = (Int(timeInterval) % 3600) / 60
        
        if hours > 0 {
            return "\(hours) Std. \(minutes) Min."
        } else {
            return "\(minutes) Minuten"
        }
    }
}

struct WebViewContainer: View {
    @Binding var currentPage: Page
    @State private var webView = WKWebView()
    @State private var isLoading = true
    
    var body: some View {
        VStack {
            HStack {
                Button(action: { currentPage = .home }) {
                    Image(systemName: "arrow.left")
                        .font(.title)
                        .foregroundColor(.blue)
                }
                .padding()
            }
            
            ZStack {
                WebView(webView: webView, url: URL(string: "https://marienschule-bielefeld.de")!, isLoading: $isLoading)
                    .edgesIgnoringSafeArea(.all)
                
                if isLoading {
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle(tint: .blue))
                        .scaleEffect(2)
                }
            }
        }
    }
}

struct WebView: UIViewRepresentable {
    var webView: WKWebView
    let url: URL
    @Binding var isLoading: Bool
    
    func makeUIView(context: Context) -> WKWebView {
        webView.navigationDelegate = context.coordinator
        let request = URLRequest(url: url)
        webView.load(request)
        return webView
    }
    
    func updateUIView(_ uiView: WKWebView, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, WKNavigationDelegate {
        var parent: WebView
        
        init(_ parent: WebView) {
            self.parent = parent
        }
        
        func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
            parent.isLoading = true
        }
        
        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            parent.isLoading = false
        }
        
        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            if let url = navigationAction.request.url, navigationAction.navigationType == .linkActivated {
                UIApplication.shared.open(url)
                decisionHandler(.cancel)
            } else {
                decisionHandler(.allow)
            }
        }
    }
}

struct CustomFloatingMenuBar: View {
    @Binding var currentPage: Page
    @Environment(\.colorScheme) var colorScheme
    var isFloating: Bool
    
    var body: some View {
        VStack {
            Spacer()
            HStack(spacing: 0) {
                ForEach([
                    (page: Page.home, icon: "house.fill", label: "Home"),
                    (page: Page.calendar, icon: "calendar", label: "Kalender"),
                    (page: Page.tasks, icon: "list.bullet", label: "Aufgaben"),
                    (page: Page.files, icon: "folder.fill", label: "Dateien"),
                    (page: Page.account, icon: "person.crop.circle", label: "Profil")
                ], id: \.page) { item in
                    MenuBarButton(
                        icon: item.icon,
                        label: item.label,
                        isSelected: currentPage == item.page,
                        action: { withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) { currentPage = item.page } }
                    )
                }
            }
            .padding(.vertical, 6)
            .padding(.horizontal, 8)
            .background(
                ZStack {
                    if colorScheme == .dark {
                        Color.black.opacity(0.95)
                    } else {
                        Color(UIColor.systemGray6).opacity(0.95)
                    }
                }
                .background(
                    Material.ultraThickMaterial
                )
                .clipShape(RoundedRectangle(cornerRadius: isFloating ? 24 : 0))
            )
            .overlay(
                RoundedRectangle(cornerRadius: isFloating ? 24 : 0)
                    .stroke(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                colorScheme == .dark ? Color.white.opacity(0.2) : Color.white.opacity(0.5),
                                colorScheme == .dark ? Color.white.opacity(0.05) : Color.white.opacity(0.2)
                            ]),
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        lineWidth: isFloating ? 1 : 0
                    )
            )
            .padding(.horizontal, isFloating ? 10 : 0)
            .padding(.bottom, isFloating ? 12 : 0)
        }
        .edgesIgnoringSafeArea(isFloating ? [] : [.bottom])
    }
}

struct MenuBarButton: View {
    let icon: String
    let label: String
    let isSelected: Bool
    let action: () -> Void
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 1) {
                ZStack {
                    if isSelected {
                        Circle()
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.blue, Color.blue.opacity(0.7)]),
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                            .frame(width: 36, height: 36)
                            .shadow(color: Color.blue.opacity(0.5), radius: 6, x: 0, y: 2)
                            .transition(.scale.combined(with: .opacity))
                    }
                    
                    Image(systemName: icon)
                        .font(.system(size: 15, weight: isSelected ? .bold : .regular))
                        .foregroundColor(isSelected ? .white : (colorScheme == .dark ? .white.opacity(0.8) : .gray))
                        .frame(width: 36, height: 36)
                }
                
                Text(label)
                    .font(.system(size: 9, weight: isSelected ? .semibold : .medium))
                    .foregroundColor(isSelected ? .blue : (colorScheme == .dark ? .white.opacity(0.8) : .gray))
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
            }
            .padding(.horizontal, 2)
            .contentShape(Rectangle())
        }
        .buttonStyle(PlainButtonStyle())
        .frame(maxWidth: .infinity)
    }
}

// Kontakt-Widget für die Marienschule
struct SchoolContactWidget: View {
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            // Header
            HStack {
                Image(systemName: "building.2.fill")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(.white)
                    .padding(10)
                    .background(
                        Circle()
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.blue, Color.blue.opacity(0.7)]),
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                        )
                    )
                
                Text("Kontakt")
                    .font(.system(size: 18, weight: .semibold))
                
                Spacer()
            }
            .padding(.horizontal, 16)
            .padding(.top, 16)
            .padding(.bottom, 12)
            
            // Divider
            Rectangle()
                .fill(Color.gray.opacity(0.2))
                    .frame(height: 1)
                    .padding(.horizontal, 16)
            
            // Content
            VStack(alignment: .leading, spacing: 16) {
                // Schulname
                Text("MARIENSCHULE")
                    .font(.system(size: 20, weight: .bold))
                    .foregroundColor(.primary)
                    .padding(.horizontal, 16)
                    .padding(.top, 12)
                
                // Adresse
                ContactInfoRow(icon: "mappin.circle.fill", title: "Adresse", content: "Sieboldstraße 4a\n33611 Bielefeld")
                
                // Telefon/Fax
                ContactInfoRow(icon: "phone.fill", title: "Telefon/Fax", content: "0521 871851\n0521 8016135")
                
                // E-Mail
                ContactInfoRow(icon: "envelope.fill", title: "E-Mail", content: "kontakt@marienschule-bielefeld.de", isLink: true, linkType: .email)
                
                // Internet
                ContactInfoRow(icon: "globe", title: "Internet", content: "marienschule-bielefeld.de", isLink: true, linkType: .website)
                    .padding(.bottom, 16)
            }
        }
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
}

// Hilfsstruct für Kontaktinformationen
struct ContactInfoRow: View {
    let icon: String
    let title: String
    let content: String
    var isLink: Bool = false
    var linkType: LinkType = .none
    
    enum LinkType {
        case none, email, website, phone
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            HStack(spacing: 4) {
                Image(systemName: icon)
                    .font(.system(size: 14))
                    .foregroundColor(.blue)
                
                Text(title)
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.secondary)
            }
            
            if isLink {
                Button(action: {
                    openLink()
                }) {
                    Text(content)
                        .font(.system(size: 15))
                        .foregroundColor(.blue)
                        .multilineTextAlignment(.leading)
                }
            } else {
                Text(content)
                    .font(.system(size: 15))
                    .foregroundColor(.primary)
                    .multilineTextAlignment(.leading)
            }
        }
        .padding(.horizontal, 16)
    }
    
    private func openLink() {
        var urlString = ""
        
        switch linkType {
        case .email:
            urlString = "mailto:\(content)"
        case .website:
            urlString = "https://\(content)"
        case .phone:
            urlString = "tel:\(content.replacingOccurrences(of: " ", with: ""))"
        default:
            return
        }
        
        if let url = URL(string: urlString) {
            UIApplication.shared.open(url)
        }
    }
}

// Widget für Fahrplan-Links
struct TransportLinksWidget: View {
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            // Header
            HStack {
                Image(systemName: "bus.fill")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(.white)
                    .padding(10)
                    .background(
                        Circle()
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.green, Color.green.opacity(0.7)]),
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                        )
                    )
                }
                
                Text("Fahrplan")
                    .font(.system(size: 18, weight: .semibold))
                
                Spacer()
            }
            .padding(.horizontal, 16)
            .padding(.top, 16)
            .padding(.bottom, 12)
            
            // Divider
            Rectangle()
                .fill(Color.gray.opacity(0.2))
                    .frame(height: 1)
                    .padding(.horizontal, 16)
            
            // Content
            VStack(spacing: 16) {
                // moBiel YOU App
                Button(action: {
                    if let url = URL(string: "https://apps.apple.com/de/app/mobiel-you/id1535032737") {
                        UIApplication.shared.open(url)
                    }
                }) {
                    HStack(spacing: 16) {
                        ZStack {
                            Circle()
                                .fill(Color.blue.opacity(0.1))
                                .frame(width: 48, height: 48)
                            
                            Image(systemName: "iphone.and.arrow.forward")
                                .font(.system(size: 20))
                                    .foregroundColor(.blue)
                        }
                        
                        VStack(alignment: .leading, spacing: 4) {
                            Text("moBiel YOU App")
                                .font(.system(size: 16, weight: .semibold))
                                .foregroundColor(.primary)
                            
                            Text("Tickets kaufen & Fahrpläne anzeigen")
                                .font(.system(size: 14))
                                .foregroundColor(.secondary)
                                .lineLimit(1)
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.up.right.square")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.blue)
                    }
                    .padding(.vertical, 12)
                    .padding(.horizontal, 16)
                    .background(
                        RoundedRectangle(cornerRadius: 12)
                            .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                            .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                    )
                }
                
                // Fahrplanauskunft
                Button(action: {
                    if let url = URL(string: "https://www.mobiel.de/fahrplaene/fahrplanauskunft/verbindung-finden/") {
                        UIApplication.shared.open(url)
                    }
                }) {
                    HStack(spacing: 16) {
                        ZStack {
                            Circle()
                                .fill(Color.green.opacity(0.1))
                                .frame(width: 48, height: 48)
                            
                            Image(systemName: "map")
                                .font(.system(size: 20))
                                    .foregroundColor(.green)
                        }
                        
                        VStack(alignment: .leading, spacing: 4) {
                            Text("Fahrplanauskunft")
                                .font(.system(size: 16, weight: .semibold))
                                .foregroundColor(.primary)
                            
                            Text("Verbindungen online suchen")
                                .font(.system(size: 14))
                                .foregroundColor(.secondary)
                                .lineLimit(1)
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.up.right.square")
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.green)
                    }
                    .padding(.vertical, 12)
                    .padding(.horizontal, 16)
                    .background(
                        RoundedRectangle(cornerRadius: 12)
                            .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                            .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                    )
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 16)
        }
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
}

// Zeile für ein Suchergebnis
struct LessonSearchResultRow: View {
    let lesson: Lesson
    let dayOffset: Int
    let dayLabel: String
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        HStack(spacing: 16) {
            // Farbiger Indikator und Icon
            ZStack {
                Circle()
                    .fill(lesson.color.opacity(0.2))
                        .frame(width: 44, height: 44)
                    
                    Image(systemName: getIconForSubject(lesson.subject))
                        .font(.system(size: 18))
                        .foregroundColor(lesson.color)
                    }
                    
                    VStack(alignment: .leading, spacing: 8) {
                        // Fach und Raum
                        HStack {
                            Text(lesson.subject)
                                .font(.system(size: 16, weight: .semibold))
                                .foregroundColor(.primary)
                            
                            Spacer()
                            
                            if !lesson.room.isEmpty {
                                HStack(spacing: 4) {
                                    Image(systemName: "mappin.circle.fill")
                                        .font(.system(size: 12))
                                        .foregroundColor(lesson.color)
                                    
                                    Text(lesson.room)
                                        .font(.system(size: 14))
                                        .foregroundColor(.secondary)
                                }
                                .padding(.horizontal, 8)
                                .padding(.vertical, 2)
                                .background(
                                    RoundedRectangle(cornerRadius: 4)
                                        .fill(lesson.color.opacity(0.1))
                                )
                            }
                        }
                        
                        // Lehrer und Zeit
                        HStack {
                            if !lesson.teacher.isEmpty {
                                HStack(spacing: 4) {
                                    Image(systemName: "person.fill")
                                        .font(.system(size: 12))
                                        .foregroundColor(lesson.color)
                                    
                                    Text(lesson.teacher)
                                        .font(.system(size: 14))
                                        .foregroundColor(.secondary)
                                }
                            }
                            
                            Spacer()
                            
                            HStack(spacing: 4) {
                                Image(systemName: "clock.fill")
                                    .font(.system(size: 12))
                                    .foregroundColor(lesson.color)
                                
                                Text(lesson.timeSlot)
                                    .font(.system(size: 14, weight: .medium))
                                    .foregroundColor(.secondary)
                            }
                        }
                        
                        // Tag
                        HStack {
                            Image(systemName: "calendar")
                                .font(.system(size: 12))
                                .foregroundColor(.blue)
                            
                            Text(dayLabel)
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.blue)
                            
                            Spacer()
                            
                            Text("Zum Kalender")
                                .font(.system(size: 12))
                                .foregroundColor(.blue)
                            
                            Image(systemName: "chevron.right")
                                .font(.system(size: 12))
                                .foregroundColor(.blue)
                        }
                    }
                }
                .padding(.vertical, 12)
            }
            .padding(.horizontal, 12)
        }
        .padding(.horizontal, 16)
        .padding(.bottom, 8)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(colorScheme == .dark ? Color(.systemGray6) : Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 5, x: 0, y: 2)
        )
    }
    
    // Gibt ein passendes Icon für das Fach zurück
    private func getIconForSubject(_ subject: String) -> String {
        let subjectLower = subject.lowercased()
        
        if subjectLower.contains("mathe") {
            return "function"
        } else if subjectLower.contains("deutsch") {
            return "text.book.closed"
        } else if subjectLower.contains("englisch") || subjectLower.contains("französisch") || subjectLower.contains("latein") || subjectLower.contains("russisch") {
            return "globe"
        } else if subjectLower.contains("physik") {
            return "atom"
        } else if subjectLower.contains("biologie") {
            return "leaf"
        } else if subjectLower.contains("chemie") {
            return "flask"
        } else if subjectLower.contains("geschichte") {
            return "clock.arrow.circlepath"
        } else if subjectLower.contains("kunst") {
            return "paintbrush"
        } else if subjectLower.contains("sport") {
            return "figure.run"
        } else if subjectLower.contains("informatik") {
            return "desktopcomputer"
        } else if subjectLower.contains("ethik") || subjectLower.contains("religion") {
            return "heart"
        } else if subjectLower.contains("erdkunde") || subjectLower.contains("geo") {
            return "map"
        } else {
            return "book"
        }
    }
}

